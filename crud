package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// User represents a user in the database
type User struct {
	ID    primitive.ObjectID `bson:"_id,omitempty"`
	Name  string
	Age   int
	Email string
}

var users []User

func createUser(client *mongo.Client, w http.ResponseWriter, r *http.Request) {
	var user User

	// Parse form data
	err := r.ParseForm()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Get form data
	user.Name = r.FormValue("name")
	ageStr := r.FormValue("age")
	user.Email = r.FormValue("email")

	// Validate input
	if user.Name == "" || user.Email == "" || ageStr == "" {
		http.Error(w, "All fields are required", http.StatusBadRequest)
		return
	}
	age, err := strconv.Atoi(ageStr)
	if err != nil {
		http.Error(w, "Invalid age", http.StatusBadRequest)
		return
	}
	user.Age = age

	// Insert user into database
	collection := client.Database("CRUD").Collection("user")
	_, err = collection.InsertOne(context.Background(), user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	fmt.Printf("Created a user with ID: %v\n", user.ID)
	res, err := collection.InsertOne(context.Background(), user)
	if err != nil {
		log.Printf("Error inserting user: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	fmt.Printf("Inserted user with ID: %v\n", res.InsertedID)

	// Redirect to index.html
	http.Redirect(w, r, "/", http.StatusSeeOther)

}

func readUsers(client *mongo.Client, w http.ResponseWriter, r *http.Request) {
	collection := client.Database("CRUD").Collection("user")
	cur, err := collection.Find(context.Background(), bson.D{})
	if err != nil {
		log.Fatal(err)
	}

	defer cur.Close(context.Background())

	var users []User
	for cur.Next(context.Background()) {
		var user User
		err := cur.Decode(&user)
		if err != nil {
			log.Fatal(err)
		}
		users = append(users, user)
	}

	if err := cur.Err(); err != nil {
		log.Fatal(err)
	}

	w.Header().Set("Content-Type", "text/html")
	fmt.Fprintln(w, "<html><head><title>Read Users</title></head><body>")
	fmt.Fprintln(w, "<h1>Read Users</h1>")
	fmt.Fprintln(w, "<table><tr><th>ID</th><th>Name</th><th>Age</th><th>Email</th></tr>")
	for _, user := range users {
		fmt.Fprintf(w, "<tr><td>%s</td><td>%s</td><td>%d</td><td>%s</td></tr>", user.ID.Hex(), user.Name, user.Age, user.Email)
	}
	fmt.Fprintln(w, "</table></body></html>")
}
func deleteUser(client *mongo.Client, w http.ResponseWriter, r *http.Request) {
	// Parse form data
	err := r.ParseForm()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Get user ID from form data
	userIDStr := r.FormValue("userID")
	if userIDStr == "" {
		http.Error(w, "User ID is required", http.StatusBadRequest)
		return
	}
	userID, err := primitive.ObjectIDFromHex(userIDStr)
	if err != nil {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	// Delete user from database
	collection := client.Database("CRUD").Collection("user")
	res, err := collection.DeleteOne(context.Background(), bson.M{"_id": userID})
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Check if user was deleted
	if res.DeletedCount == 0 {
		http.Error(w, "User not found", http.StatusNotFound)
		return
	}

	// Redirect to index.html
	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func main() {

	clientOptions := options.Client().ApplyURI("mongodb+srv://moiz697:jijjkklkikk129@cluster0.xdxgkmq.mongodb.net/cru")
	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}

	defer client.Disconnect(context.Background())

	err = client.Ping(context.Background(), nil)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Connected to MongoDB!")
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.Method == "GET" {
			http.ServeFile(w, r, "index.html")
		} else if r.Method == "POST" {
			createUser(client, w, r)
			readUsers(client, w, r)
		}
	})

	fmt.Println("Listening on port 8080...")
	http.ListenAndServe(":8080", nil)
}
